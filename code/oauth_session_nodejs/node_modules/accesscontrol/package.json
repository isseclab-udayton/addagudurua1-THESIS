{
  "_from": "accesscontrol@^2.2.1",
  "_id": "accesscontrol@2.2.1",
  "_inBundle": false,
  "_integrity": "sha512-52EvFk/J9EF+w4mYQoKnOTkEMj01R1U5n2fc1dai6x1xkgOks3DGkx01qQL2cKFxGmE4Tn1krAU3jJA9L1NMkg==",
  "_location": "/accesscontrol",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "accesscontrol",
    "fetchSpec": "^2.2.1",
    "name": "accesscontrol",
    "raw": "accesscontrol@^2.2.1",
    "rawSpec": "^2.2.1",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/accesscontrol/-/accesscontrol-2.2.1.tgz",
  "_shasum": "c942c48e330841c619682309a8c3aeec6bec66eb",
  "_spec": "accesscontrol@^2.2.1",
  "_where": "F:\\Thesis\\Code\\oauth_session_nodejs",
  "author": {
    "email": "onur@cutepilot.com",
    "name": "Onur Yildirim"
  },
  "bugs": {
    "url": "https://github.com/onury/accesscontrol/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "notation": "^1.3.6"
  },
  "deprecated": false,
  "description": "Role and Attribute based Access Control for Node.js",
  "devDependencies": {
    "@types/jest": "^22.1.3",
    "@types/node": "^9.4.6",
    "coveralls": "^3.0.0",
    "docma": "^1.5.3",
    "jest-cli": "^22.4.2",
    "mkdirp": "^0.5.1",
    "ncp": "^2.0.0",
    "rimraf": "^2.6.2",
    "snyk": "^1.69.9",
    "ts-jest": "^22.0.4",
    "typescript": "^2.7.2"
  },
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "files": [
    "LICENSE",
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/onury/accesscontrol#readme",
  "jest": {
    "collectCoverageFrom": [
      "!**/IAccessInfo.ts",
      "!**/IQueryInfo.ts",
      "!src/index.ts",
      "src/**/*.ts"
    ],
    "coverageDirectory": "./test/.coverage",
    "moduleFileExtensions": [
      "js",
      "json",
      "ts",
      "tsx"
    ],
    "roots": [
      "<rootDir>/lib",
      "<rootDir>/src",
      "<rootDir>/test"
    ],
    "testEnvironment": "node",
    "testMatch": [
      "**/test/(*.)?(spec|test).ts"
    ],
    "testPathIgnorePatterns": [
      "/.coverage/",
      "/backup/"
    ],
    "transform": {
      "^.+\\.tsx?$": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    }
  },
  "keywords": [
    "abac",
    "access",
    "access-control",
    "acl",
    "action",
    "admin",
    "allow",
    "attribute",
    "context",
    "create",
    "crud",
    "delete",
    "deny",
    "express",
    "glob",
    "grant",
    "permission",
    "policy",
    "possession",
    "rbac",
    "read",
    "reject",
    "resource",
    "role",
    "scope",
    "update",
    "user",
    "wildcard"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "accesscontrol",
  "optionalDependencies": {},
  "readme": "<p align=\"center\"><img width=\"465\" height=\"170\" src=\"https://raw.github.com/onury/accesscontrol/master/ac-logo.png\" /></p>\n\n[![build-status](https://img.shields.io/travis/onury/accesscontrol.svg?branch=master)](https://travis-ci.org/onury/accesscontrol)\n[![Coverage Status](https://coveralls.io/repos/github/onury/accesscontrol/badge.svg?branch=master)](https://coveralls.io/github/onury/accesscontrol?branch=master)\n[![dependencies](https://david-dm.org/onury/accesscontrol.svg)](https://david-dm.org/onury/accesscontrol)\n[![Known Vulnerabilities](https://snyk.io/test/github/onury/accesscontrol/badge.svg)](https://snyk.io/test/github/onury/accesscontrol)\n[![maintained](https://img.shields.io/maintenance/yes/2018.svg)](https://github.com/onury/accesscontrol/graphs/commit-activity)  \n[![npm](http://img.shields.io/npm/v/accesscontrol.svg)](https://www.npmjs.com/package/accesscontrol)\n[![release](https://img.shields.io/github/release/onury/accesscontrol.svg)](https://github.com/onury/accesscontrol)\n[![license](http://img.shields.io/npm/l/accesscontrol.svg)](https://github.com/onury/accesscontrol/blob/master/LICENSE)\n[![TypeScript](https://img.shields.io/badge/written%20in-%20TypeScript%20-6575ff.svg)](https://www.typescriptlang.org)\n[![documentation](https://img.shields.io/badge/documentation-click_to_read-c27cf4.svg?documentation=click_to_read)](http://onury.io/accesscontrol/?api=ac)    \n\n> © 2018, Onur Yıldırım ([@onury](https://github.com/onury)). MIT License.\n\nRole and Attribute based Access Control for Node.js  \n\nMany [RBAC][rbac] (Role-Based Access Control) implementations differ, but the basics is widely adopted since it simulates real life role (job) assignments. But while data is getting more and more complex; you need to define policies on resources, subjects or even environments. This is called [ABAC][abac] (Attribute-Based Access Control).\n\nWith the idea of merging the best features of the two (see this [NIST paper][nist-paper]); this library implements RBAC basics and also focuses on *resource* and *action* attributes.\n\n### Core Features\n\n- Chainable, friendly API.  \ne.g. `ac.can(role).create(resource)`\n- Role hierarchical **inheritance**.\n- Define grants **at once** (e.g. from database result) or **one by one**.\n- Grant/deny permissions by attributes defined by **glob notation** (with nested object support).\n- Ability to **filter** data (model) instance by allowed attributes.\n- Ability to control access on **own** or **any** resources.\n- Ability to **lock** underlying grants model.\n- No **silent** errors.\n- **Fast**. (Grants are stored in memory, no database queries.)\n- Brutally **tested**.\n- TypeScript support.\n\n_In order to build on more solid foundations, this library (v1.5.0+) is completely re-written in TypeScript._\n\n## Installation\n\nwith [**npm**](https://www.npmjs.com/package/accesscontrol): `npm i accesscontrol --save`  \n\nwith [**yarn**](https://yarn.pm/accesscontrol): `yarn add accesscontrol`\n\n## Guide\n\n```js\nconst AccessControl = require('accesscontrol');\n// or:\n// import { AccessControl } from 'accesscontrol';\n```\n\n### Basic Example\n\nDefine roles and grants one by one.\n```js\nconst ac = new AccessControl();\nac.grant('user')                    // define new or modify existing role. also takes an array.\n    .createOwn('video')             // equivalent to .createOwn('video', ['*'])\n    .deleteOwn('video')\n    .readAny('video')\n  .grant('admin')                   // switch to another role without breaking the chain\n    .extend('user')                 // inherit role capabilities. also takes an array\n    .updateAny('video', ['title'])  // explicitly defined attributes\n    .deleteAny('video');\n\nconst permission = ac.can('user').createOwn('video');\nconsole.log(permission.granted);    // —> true\nconsole.log(permission.attributes); // —> ['*'] (all attributes)\n\npermission = ac.can('admin').updateAny('video');\nconsole.log(permission.granted);    // —> true\nconsole.log(permission.attributes); // —> ['title']\n```\n\n### Express.js Example\n\nCheck role permissions for the requested resource and action, if granted; respond with filtered attributes.\n\n```js\nconst ac = new AccessControl(grants);\n// ...\nrouter.get('/videos/:title', function (req, res, next) {\n    const permission = ac.can(req.user.role).readAny('video');\n    if (permission.granted) {\n        Video.find(req.params.title, function (err, data) {\n            if (err || !data) return res.status(404).end();\n            // filter data by permission attributes and send.\n            res.json(permission.filter(data));\n        });\n    } else {\n        // resource is forbidden for this user/role\n        res.status(403).end();\n    }\n});\n```\n\n### Roles\n\nYou can create/define roles simply by calling `.grant(<role>)` or `.deny(<role>)` methods on an `AccessControl` instance.  \n\n- Roles can extend other roles.\n\n```js\n// user role inherits viewer role permissions\nac.grant('user').extend('viewer');\n// admin role inherits both user and editor role permissions\nac.grant('admin').extend(['user', 'editor']);\n// both admin and superadmin roles inherit moderator permissions\nac.grant(['admin', 'superadmin']).extend('moderator');\n```\n\n- Inheritance is done by reference, so you can grant resource permissions before or after extending a role. \n\n```js\n// case #1\nac.grant('admin').extend('user') // assuming user role already exists\n  .grant('user').createOwn('video');\n\n// case #2\nac.grant('user').createOwn('video')\n  .grant('admin').extend('user');\n\n// below results the same for both cases\nconst permission = ac.can('admin').createOwn('video');\nconsole.log(permission.granted); // true\n```\n\nNotes on inheritance:  \n- A role cannot extend itself.\n- Cross-inheritance is not allowed.  \ne.g. `ac.grant('user').extend('admin').grant('admin').extend('user')` will throw.\n- A role cannot (pre)extend a non-existing role. In other words, you should first create the base role.  e.g. `ac.grant('baseRole').grant('role').extend('baseRole')`\n\n### Actions and Action-Attributes\n\n[CRUD][crud] operations are the actions you can perform on a resource. There are two action-attributes which define the **possession** of the resource: *own* and *any*.\n\nFor example, an `admin` role can `create`, `read`, `update` or `delete` (CRUD) **any** `account` resource. But a `user` role might only `read` or `update` its **own** `account` resource.\n\n<table>\n    <thead>\n        <tr>\n            <th>Action</th>\n            <th>Possession</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td rowspan=\"2\">\n            <b>C</b>reate<br />\n            <b>R</b>ead<br />\n            <b>U</b>pdate<br />\n            <b>D</b>elete<br />\n            </td>\n            <td>Own</td>\n            <td>The C|R|U|D action is (or not) to be performed on own resource(s) of the current subject.</td>\n        </tr>\n        <tr>\n            <td>Any</td>\n            <td>The C|R|U|D action is (or not) to be performed on any resource(s); including own.</td>\n        </tr>   \n    </tbody>\n</table>\n\n```js\nac.grant('role').readOwn('resource');\nac.deny('role').deleteAny('resource');\n```\n\n_Note that **own** requires you to also check for the actual possession. See [this](https://github.com/onury/accesscontrol/issues/14#issuecomment-328316670) for more._\n\n### Resources and Resource-Attributes\n\nMultiple roles can have access to a specific resource. But depending on the context, you may need to limit the contents of the resource for specific roles.  \n\nThis is possible by resource attributes. You can use Glob notation to define allowed or denied attributes.\n\nFor example, we have a `video` resource that has the following attributes: `id`, `title` and `runtime`.\nAll attributes of *any* `video` resource can be read by an `admin` role:\n```js\nac.grant('admin').readAny('video', ['*']);\n// equivalent to:\n// ac.grant('admin').readAny('video');\n```\nBut the `id` attribute should not be read by a `user` role.  \n```js\nac.grant('user').readOwn('video', ['*', '!id']);\n// equivalent to:\n// ac.grant('user').readOwn('video', ['title', 'runtime']);\n```\n\nYou can also use nested objects (attributes).\n```js\nac.grant('user').readOwn('account', ['*', '!record.id']);\n```\n\n### Checking Permissions and Filtering Attributes\n\nYou can call `.can(<role>).<action>(<resource>)` on an `AccessControl` instance to check for granted permissions for a specific resource and action.\n\n```js\nconst permission = ac.can('user').readOwn('account');\npermission.granted;       // true\npermission.attributes;    // ['*', '!record.id']\npermission.filter(data);  // filtered data (without record.id)\n```\nSee [express.js example](#expressjs-example).\n\n### Defining All Grants at Once\n\nYou can pass the grants directly to the `AccessControl` constructor.\nIt accepts either an `Object`:\n\n```js\n// This is actually how the grants are maintained internally.\nlet grantsObject = {\n    admin: {\n        video: {\n            'create:any': ['*', '!views'],\n            'read:any': ['*'],\n            'update:any': ['*', '!views'],\n            'delete:any': ['*']\n        }\n    },\n    user: {\n        video: {\n            'create:own': ['*', '!rating', '!views'],\n            'read:own': ['*'],\n            'update:own': ['*', '!rating', '!views'],\n            'delete:own': ['*']\n        }\n    }\n};\nconst ac = new AccessControl(grantsObject);\n```\n... or an `Array` (useful when fetched from a database):\n```js\n// grant list fetched from DB (to be converted to a valid grants object, internally)\nlet grantList = [\n    { role: 'admin', resource: 'video', action: 'create:any', attributes: '*, !views' },\n    { role: 'admin', resource: 'video', action: 'read:any', attributes: '*' },\n    { role: 'admin', resource: 'video', action: 'update:any', attributes: '*, !views' },\n    { role: 'admin', resource: 'video', action: 'delete:any', attributes: '*' },\n\n    { role: 'user', resource: 'video', action: 'create:own', attributes: '*, !rating, !views' },\n    { role: 'user', resource: 'video', action: 'read:any', attributes: '*' },\n    { role: 'user', resource: 'video', action: 'update:own', attributes: '*, !rating, !views' },\n    { role: 'user', resource: 'video', action: 'delete:own', attributes: '*' }\n];\nconst ac = new AccessControl(grantList);\n```\nYou can set grants any time...\n```js\nconst ac = new AccessControl();\nac.setGrants(grantsObject);\nconsole.log(ac.getGrants());\n```\n...unless you lock it:\n```js\nac.lock().setGrants({}); // throws after locked\n```\n\n## Documentation\n\nYou can read the full [**API reference**][docs] with lots of details, features and examples.  \nAnd more at the [F.A.Q. section][faq].\n\n## Change-Log\n\nSee [CHANGELOG][changelog].\n\n## Contributing\n\nClone original project:\n\n```sh\ngit clone https://github.com/onury/accesscontrol.git\n```\n\nInstall dependencies:\n\n```sh\nnpm install\n```\n\nAdd tests to relevant file under [/test](test/) directory and run:  \n\n```sh\nnpm run build && npm run cover\n```\n\nUse included `tslint.json` and `editorconfig` for style and linting.  \nTravis build should pass, coverage should not degrade.\n\n## License\n\n[**MIT**][license].\n\n[docs]:http://onury.io/accesscontrol/?api=ac\n[faq]:http://onury.io/accesscontrol/?content=faq\n[rbac]:https://en.wikipedia.org/wiki/Role-based_access_control\n[abac]:https://en.wikipedia.org/wiki/Attribute-Based_Access_Control\n[crud]:https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\n[nist-paper]:http://csrc.nist.gov/groups/SNS/rbac/documents/kuhn-coyne-weil-10.pdf\n[changelog]:https://github.com/onury/accesscontrol/blob/master/CHANGELOG.md\n[license]:https://github.com/onury/accesscontrol/blob/master/LICENSE\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/onury/accesscontrol.git"
  },
  "scripts": {
    "build": "npm run clean && mkdirp ./lib && tsc",
    "clean": "rimraf ./lib",
    "cover": "npm run build && jest --coverage --verbose --no-cache",
    "cover!": "jest --coverage --verbose --no-cache",
    "coveralls": "cat ./test/.coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js -v",
    "deps": "npm-check -u && snyk test",
    "docs": "docma -c ./docma.config.json",
    "report": "open ./test/.coverage/lcov-report/index.html",
    "test": "npm run build && jest --verbose --no-cache",
    "test!": "jest --verbose --no-cache",
    "vuls": "snyk test"
  },
  "types": "./lib/index.d.ts",
  "version": "2.2.1"
}
